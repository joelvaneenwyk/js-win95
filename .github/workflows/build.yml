name: Build & Release

on:
  push:
    branches: [main, dev, develop, master]
    tags:
      - v*
  pull_request:
    branches: [main, dev, develop, master]

env:
  NODE_VERSION: 20.x

  # 'nektos/act' sets this to true so we know when we are running through
  # that instead of GitHub Actions.
  ACT: false

jobs:
  lint:
    name: 'Lint 🔍'
    runs-on: ubuntu-latest
    outputs:
      cache-folder: ${{ steps.node-cache-dir-path.outputs.cache-folder }}
    steps:
      # Install 'sudo' if running in 'nektos/act' due to an issue where environment
      # does not match, see https://github.com/nektos/act/issues/107.
      - name: Install 'nektos/act' dependencies
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install sudo -y

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get cache directory path
        id: node-cache-dir-path
        shell: bash
        run: |
          _cache_path="$(npm config get cache 2>/dev/null || true)"
          echo "cache-folder=${_cache_path:-}" >> "$GITHUB_OUTPUT"

      - uses: actions/cache@v4
        id: node-cache
        with:
          key: "node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json', 'package.json') }}-${{ runner.os }}"
          path: '${{ steps.node-cache-dir-path.outputs.cache-folder }}'

      - name: Install packages
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Lint
        run: npm run lint

  build:
    name: 'Build // ${{ matrix.os }} // ${{ matrix.arch }}'
    runs-on: '${{ matrix.os }}-latest'
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        # Build for supported platforms
        # https://github.com/electron/electron-packager/blob/ebcbd439ff3e0f6f92fa880ff28a8670a9bcf2ab/src/targets.js#L9
        # 32-bit Linux unsupported as of 2019: https://www.electronjs.org/blog/linux-32bit-support
        os: [macOS, ubuntu, windows]
        arch: [x64, arm64]
        include:
          - os: windows
            arch: ia32
          - os: ubuntu
            arch: armv7l
        # Publishing artifacts for multiple Windows architectures has
        # a bug which can cause the wrong architecture to be downloaded
        # for an update, so until that is fixed, only build Windows x64
        exclude:
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get cache directory path
        id: node-cache-dir-path
        shell: bash
        run: |
          _cache_path="$(npm config get cache)"
          echo "cache-folder="${_cache_path:-}"" >> "$GITHUB_OUTPUT"

      - uses: actions/cache@v4
        id: node-cache
        with:
          path: ${{ steps.node-cache-dir-path.outputs.cache-folder }}
          key: node-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}${{ env.NODE_VERSION }}

      - name: Install packages
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Forge Package
        run: npm run package -- --arch=${{ matrix.arch }}

      #- name: Set MacOS signing certs
      #  if: matrix.os == 'macOS'
      #  continue-on-error: true
      #  run: chmod +x tools/add-macos-cert.sh && ./tools/add-macos-cert.sh
      #  env:
      #    MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
      #    MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}

      #- name: Set Windows signing certificate
      #  if: matrix.os == 'windows'
      #  continue-on-error: true
      #  id: write_file
      #  uses: timheuer/base64-to-file@v1
      #  with:
      #    fileName: 'win-certificate.pfx'
      #    encodedString: ${{ secrets.WINDOWS_CODESIGN_P12 }}

      - name: Download disk image (ps1)
        run: tools/download-disk.ps1
        if: runner.os != 'Windows' && startsWith(github.ref, 'refs/tags/')
        env:
          DISK_URL: ${{ secrets.DISK_URL }}

      - name: Download disk image (sh)
        run: ./tools/download-disk.sh
        if: runner.os != 'Windows' && startsWith(github.ref, 'refs/tags/')
        env:
          DISK_URL: ${{ secrets.DISK_URL }}

      #- name: Forge Make
      #  run: npm run make -- --arch=${{ matrix.arch }}
      #  continue-on-error: true
      #  env:
      #    APPLE_ID: ${{ secrets.APPLE_ID || '' }}
      #    APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD || '' }}
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    WINDOWS_CODESIGN_FILE: ${{ steps.write_file.outputs.filePath || '' }}
      #    WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD || '' }}

      #- name: Release
      #  uses: softprops/action-gh-release@v2
      #  if: startsWith(github.ref, 'refs/tags/')
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    draft: true
      #    files: |
      #      out/**/*.deb
      #      out/**/*.dmg
      #      out/**/*setup*.exe
      #      out/**/*.rpm
      #      out/**/*.zip
